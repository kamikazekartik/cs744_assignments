INFO:root:using Tesla V100-SXM2-16GB
INFO:root:weight    : BlockFloatingPoint (wl=4, dim=0)
INFO:root:activate  : BlockFloatingPoint (wl=4, dim=0)
INFO:root:grad      : BlockFloatingPoint (wl=4, dim=0)
INFO:root:error     : BlockFloatingPoint (wl=4, dim=0)
INFO:root:momentum  : BlockFloatingPoint (wl=4, dim=0)
INFO:root:Running experiment with args: Namespace(batch_size=256, dataset='Cifar10', device='cuda', gamma=0.998, low_prec=True, lr=0.1, max_epochs=161, model='preresnet', nbits_activate=4, nbits_error=4, nbits_grad=4, nbits_momentum=4, nbits_weight=4, num_classes=1000, preload_data=False, pruned_model_path=None, results_filename='output/v100_fullmodel_2/results_preresnet_Cifar10_batchsize256_precision4bit.csv', rounding='stochastic', save_model=False, seed=42, test_batch_size=1000, use_amp=False, use_half=False)
Seeded everything with seed: 42
Files already downloaded and verified
Files already downloaded and verified
Building unpruned resnet from scratch
INFO:root:Accuracy of plane :  0 %
INFO:root:Accuracy of   car :  0 %
INFO:root:Accuracy of  bird :  0 %
INFO:root:Accuracy of   cat :  0 %
INFO:root:Accuracy of  deer :  0 %
INFO:root:Accuracy of   dog : 13 %
INFO:root:Accuracy of  frog : 90 %
INFO:root:Accuracy of horse :  0 %
INFO:root:Accuracy of  ship :  0 %
INFO:root:Accuracy of truck :  0 %
INFO:root:
Test set: Average loss: 0.0002, Accuracy: 1052/10000 (11%)

INFO:root:Train Epoch: 1 [0 (0%)]	Loss: 2.311620
INFO:root:Train Epoch: 2 [0 (0%)]	Loss: 2.164812
INFO:root:Train Epoch: 3 [0 (0%)]	Loss: 2.078025
INFO:root:Train Epoch: 4 [0 (0%)]	Loss: 1.931528
INFO:root:Train Epoch: 5 [0 (0%)]	Loss: 1.672490
INFO:root:Train Epoch: 6 [0 (0%)]	Loss: nan
INFO:root:Train Epoch: 7 [0 (0%)]	Loss: nan
INFO:root:Train Epoch: 8 [0 (0%)]	Loss: nan
Traceback (most recent call last):
  File "main.py", line 281, in <module>
    results_df = run_experiment(args, number_dict, quant_dict)
  File "main.py", line 170, in run_experiment
    last_epoch_loss = train(model, optimizer, criterion, scaler, train_loader, args.use_amp, epoch)
  File "main.py", line 99, in train
    scaler.scale(loss).backward()      # Loss backward pass
  File "/home/treitz/.local/lib/python3.7/site-packages/torch/tensor.py", line 221, in backward
    torch.autograd.backward(self, gradient, retain_graph, create_graph)
  File "/home/treitz/.local/lib/python3.7/site-packages/torch/autograd/__init__.py", line 132, in backward
    allow_unreachable=True)  # allow_unreachable flag
KeyboardInterrupt
